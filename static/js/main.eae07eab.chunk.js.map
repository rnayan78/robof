{"version":3,"sources":["components/card.js","components/CardList.js","components/scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["card","name","email","id","className","alt","src","CardList","robots","map","user","i","Scroll","props","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,+CAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACA,6BAAKF,IACL,4BAAIC,WCeDK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACA,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCCVC,EATA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,SAApE,SACKJ,EAAMK,YCWJC,G,KAbG,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC7B,OACI,qBAAKjB,UAAW,MAAhB,SACI,uBACCA,UAAU,oCACVkB,KAAK,SACLC,YAAY,eACZC,SAAYH,QCaVI,G,wDApBX,WAAYZ,GAAO,IAAD,8BACd,cAAMA,IACDa,MAAQ,CACTC,UAAU,GAHA,E,qDAOlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAI7B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,yDAEJG,KAAKjB,MAAMK,a,GAjBEc,cCuDbC,E,kDA/CX,aAAc,IAAD,8BACT,gBAcJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACX,YAAae,EAAMC,OAAOC,SAdzC,EAAKX,MAAQ,CACTlB,OAAQ,GACRY,YAAa,IAJR,E,qDASb,WAAqB,IAAD,OAChBkB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACvB,OAAQkC,S,oBAO3C,WAAS,IAAD,OACEC,EAAiBb,KAAKJ,MAAMlB,OAAOoC,QAAO,SAAAC,GAChD,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKrB,MAAMN,YAAY0B,kBAEhE,OAAIhB,KAAKJ,MAAMlB,OAAOwC,OAId,sBAAK5C,UAAU,KAAf,UAEI,6CACA,cAAC,EAAD,CAAWiB,aAAeS,KAAKI,iBAC/B,cAAC,EAAD,UACI,cAAC,EAAD,UACA,cAAC,EAAD,CAAU1B,OAAQmC,WATvB,6C,GAzBDX,aCGHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAUhDX,M","file":"static/js/main.eae07eab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?150x150`}/>\r\n            <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n           </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user,i) => {\r\n                return (\r\n                <Card \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                    />\r\n                );\r\n            })\r\n            \r\n        }          \r\n       </div>  \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SearchBox = ({searchfield, searchChange }) => {\r\n    return (\r\n        <div className= 'pa2'>\r\n            <input \r\n             className=\"pa3 ba b--green bg-lightest-green\"\r\n             type='search' \r\n             placeholder='search robos' \r\n             onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>Oops.Some error occured</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/scroll';\nimport SearchBox from '../components/SearchBox'; \nimport './App.css';\nimport ErrorBoundary  from '../components/ErrorBoundary';\n\n\n\nclass App extends Component{\n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n\n        }\n    }\n    \n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n         .then(response =>  response.json())\n         .then(users => this.setState({robots: users}));\n       \n    }\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value })\n       \n    }\n    render(){\n        const filteredRobots = this.state.robots.filter(robot =>{\n        return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        })\n        if(!this.state.robots.length){\n            return <h1>Loading</h1>\n        } else {\n            return (\n                <div className='tc'>\n        \n                    <h1>RoboFriends</h1>\n                    <SearchBox searchChange= {this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                        </ErrorBoundary>\n\n                        \n                    </Scroll>\n                    \n                </div>\n            );\n\n        }\n        \n    }\n    \n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n  //<React.StrictMode>\n    \n  //</React.StrictMode>,\n   \n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}